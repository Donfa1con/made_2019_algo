/*
Реализуйте структуру данных типа “множество строк” на основе динамической хеш-таблицы с открытой адресацией.
Хранимые строки непустые и состоят из строчных латинских букв.
Хеш-функция строки должна быть реализована с помощью вычисления значения многочлена методом Горнера.
Начальный размер таблицы должен быть равным 8-ми.
Перехеширование выполняйте при добавлении элементов в случае, когда коэффициент заполнения таблицы достигает 3/4.
Структура данных должна поддерживать операции добавления строки в множество,
удаления строки из множества и проверки принадлежности данной строки множеству.
Для разрешения коллизий используйте квадратичное пробирование.
i-ая проба g(k, i)=g(k, i-1) + i (mod m). m - степень двойки.
 
Каждая строка входных данных задает одну операцию над множеством.
Запись операции состоит из типа операции и следующей за ним через пробел строки, над которой проводится операция.
Тип операции – один из трех символов:
 + означает добавление данной строки в множество;
 - означает удаление строки из множества;
 ? означает проверку принадлежности данной строки множеству.
При добавлении элемента в множество НЕ ГАРАНТИРУЕТСЯ, что он отсутствует в этом множестве.
При удалении элемента из множества НЕ ГАРАНТИРУЕТСЯ, что он присутствует в этом множестве.
 Пример
 Ввод       Вывод
 + hello    OK
 + bye      OK
 ? bye      OK
 + bye      FAIL
 - bye      OK
 ? bye      FAIL
 ? hello    OK
*/
#include <iostream>
#include <string>
#include "hash_table/hash_table.hpp"

int main() {
    HashTable table;
    char command = ' ';
    std::string key;
    while (std::cin >> command >> key) {
        switch (command) {
            case '?':
                std::cout << (table.has(key) ? "OK" : "FAIL") << std::endl;
                break;
            case '+':
                std::cout << (table.add(key) ? "OK" : "FAIL") << std::endl;
                break;
            case '-':
                std::cout << (table.remove(key) ? "OK" : "FAIL") << std::endl;
                break;
        }
    }
    return 0;
}
